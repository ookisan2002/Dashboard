#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

// Thiết lập thông tin kết nối WiFi
const char* ssid = "iPhone";
const char* password = "20022001";

// Thiết lập thông tin kết nối MQTT
const char* mqtt_server = "172.20.10.7";
const int mqtt_port = 1883;
const char* mqtt_topic = "sensor/data";
const char* mqtt_lightbulb_topic = "sensor/Light_buld";
const char* mqtt_conditioner_topic = "sensor/Air_conditioner";
const char* mqtt_fan_topic = "sensor/Fan";

// Thiết lập chân điều khiển đèn
const int lightPin = 13;
const int conditionerPin = 12;
const int fanPin=14;
const int warningPin=27;

// Thiết lập chân kết nối cảm biến DHT11
const int dhtPin = 4;
const int dhtType = DHT22;

const int photodiodePin = A0;

// Khởi tạo đối tượng WiFiClient để kết nối WiFi
WiFiClient wifiClient;

// Khởi tạo đối tượng PubSubClient
PubSubClient client(wifiClient);

// Khởi tạo đối tượng cảm biến DHT11
DHT dht(dhtPin, dhtType);

// Hàm callback được gọi khi nhận được tin nhắn từ máy chủ MQTT
void callback(char* topic, byte* payload, unsigned int length) {
  // Chuyển đổi payload thành chuỗi ký tự
  char payloadStr[length + 1];
  memcpy(payloadStr, payload, length);
  payloadStr[length] = '\0';

  // Kiểm tra topic của tin nhắn
  
  if (strcmp(topic, mqtt_lightbulb_topic) == 0) {
    // Kiểm tra giá trị của payload để điều khiển đèn 1
    if (strcmp(payloadStr, "1") == 0) {
      digitalWrite(lightPin, HIGH);  // Bật đèn 1
    } else if (strcmp(payloadStr, "0") == 0) {
      digitalWrite(lightPin, LOW);   // Tắt đèn 1
    }
  } else if (strcmp(topic, mqtt_conditioner_topic) == 0) {
    // Kiểm tra giá trị của payload để điều khiển đèn 2
    if (strcmp(payloadStr, "1") == 0) {
      digitalWrite(conditionerPin, HIGH);  // Bật đèn 2
    } else if (strcmp(payloadStr, "0") == 0) {
      digitalWrite(conditionerPin, LOW);   // Tắt đèn 2
    }
  }else if (strcmp(topic, mqtt_fan_topic) == 0) {
    // Kiểm tra giá trị của payload để điều khiển đèn 3
    if (strcmp(payloadStr, "1") == 0) {
      digitalWrite(fanPin, HIGH);  // Bật đèn 3
    } else if (strcmp(payloadStr, "0") == 0) {
      digitalWrite(fanPin, LOW);   // Tắt đèn 3
    }
  }
}

void setup(){
  // Khởi tạo chân điều khiển đèn là OUTPUT
  pinMode(lightPin, OUTPUT);
  pinMode(conditionerPin, OUTPUT);
  pinMode(fanPin, OUTPUT);
  pinMode(warningPin, OUTPUT);
  pinMode(photodiodePin,INPUT);
  Serial.begin(9600);
  
  // Kết nối đến mạng WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Đang kết nối tới mạng WiFi...");
  }
  Serial.println("Đã kết nối tới mạng WiFi");

  // Thiết lập máy chủ MQTT và callback
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);

  // Kết nối tới máy chủ MQTT
  while (!client.connected()) {
    if (client.connect("ESP32Client")) {
      Serial.println("Đã kết nối tới máy chủ MQTT");
      // Đăng ký để nhận tin nhắn từ các topic cần theo dõi
      client.subscribe(mqtt_lightbulb_topic);
      client.subscribe(mqtt_conditioner_topic);
      client.subscribe(mqtt_fan_topic);
    } else {
      Serial.print("Không thể kết nối tới máy chủ MQTT, rc=");
      Serial.print(client.state());
      Serial.println(" Đang thử kết nối lại...");
      delay(5000);
    }
  }

  // Khởi tạo cảm biến DHT11
  dht.begin();
}

void loop() {
  // Kiểm tra kết nối đến máy chủ MQTT
  if (!client.connected()) {
    Serial.println("Mất kết nối tới máy chủ MQTT.Đang thử kết nối lại...");
    // Thử kết nối lại
    if (client.connect("ESP32Client")) {
      Serial.println("Đã kết nối tới máy chủ MQTT");
      // Đăng ký để nhận tin nhắn từ các topic cần theo dõi
      client.subscribe(mqtt_lightbulb_topic);
      client.subscribe(mqtt_conditioner_topic);
      client.subscribe(mqtt_fan_topic);
    } else {
      Serial.print("Không thể kết nối tới máy chủ MQTT, rc=");
      Serial.print(client.state());
      Serial.println(" Đang thử kết nối lại...");
      delay(5000);
    }
  }

  // Xử lý thông điệp MQTT
  client.loop();

  // Đọc nhiệt độ và độ ẩm từ cảm biến DHT11
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();

  // Kiểm tra trạng thái đèn và tạo chuỗi JSON
  int dust = random(101);
  int light =4100 - analogRead(photodiodePin);
  if(dust>70){
    int currentLight=digitalRead(warningPin);
    Serial.println(currentLight);
    digitalWrite(warningPin,!currentLight);
  }else{
    digitalWrite(warningPin,LOW);
  }

  String jsonMessage = "{\"temperature\":" + String(temperature) +
                       ",\"humidity\":" + String(humidity) +
                       ",\"dust\":" + String(dust) +
                       ",\"light\":" + String(light) +"}";
  // Gửi tin nhắn JSON qua MQTT
  client.publish(mqtt_topic, jsonMessage.c_str());

  // Chờ 2 giây trước khi gửi tin nhắn tiếp theo
  delay(2000);
}